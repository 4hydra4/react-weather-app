{"version":3,"sources":["components/WeatherCard.js","components/CitySelector.js","App.js","reportWebVitals.js","index.js"],"names":["WeatherCard","weatherData","dt","description","mainTemp","feelsLike","iconID","date","Date","className","style","width","textAlign","src","toLocaleDateString","CitySelector","fetchAPI","useState","city","setCity","placeholder","onChange","e","target","value","onKeyDown","keyCode","id","onClick","preventDefault","type","App","setWeatherData","a","fetch","process","result","json","res","data","i","push","list","main","feels_like","temp","weather","icon","length","alert","console","log","map","dataEntry","index","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"oPA4BeA,MA1Bf,YAAuC,IAAhBC,EAAe,EAAfA,YACbC,EAAiDD,EAAjDC,GAAIC,EAA6CF,EAA7CE,YAAaC,EAAgCH,EAAhCG,SAAUC,EAAsBJ,EAAtBI,UAAWC,EAAWL,EAAXK,OACxCC,EAAO,IAAIC,KAAU,IAALN,GAEtB,OACE,qBAAKO,UAAU,kBAAf,SACE,sBACEA,UAAU,sBACVC,MAAO,CAAEC,MAAO,QAASC,UAAW,UAFtC,UAIE,qBACEC,IAAG,2CAAsCP,EAAtC,WACHG,UAAU,uBACVC,MAAO,CAAEC,MAAO,WAElB,sBAAKF,UAAU,YAAf,UACE,oBAAIA,UAAU,YAAd,SAA2BN,IAC3B,oBAAGM,UAAU,YAAb,cAA2BF,EAAKO,wBAChC,oBAAGL,UAAU,YAAb,0BAAuCL,EAAvC,YACA,oBAAGK,UAAU,YAAb,yBAAsCJ,EAAtC,qBC2BKU,MA9Cf,YAAqC,IAAbC,EAAY,EAAZA,SACtB,EAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KAmBA,OACE,mCACE,+BACE,sBAAKV,UAAU,aAAf,UACE,uBACEA,UAAU,0BACVW,YAAY,kBACZC,SAZW,SAACC,GACpBH,EAAQG,EAAEC,OAAOC,QAYTC,UAnBa,SAACH,GACJ,KAAdA,EAAEI,SACJV,EAASE,IAkBHS,GAAG,cACHH,MAAON,IAET,wBACEU,QA9BV,SAAoBN,GAClBA,EAAEO,iBACFb,EAASE,GACTC,EAAQ,KA4BAV,UAAU,kBACVkB,GAAG,cACHG,KAAK,SAJP,mC,MCuCKC,MApEf,WACE,MAAsCd,mBAAS,IAA/C,mBAAOhB,EAAP,KAAoB+B,EAApB,KAkBMhB,EAAQ,uCAAG,WAAOE,GAAP,qBAAAe,EAAA,+EAEQC,MAAM,sDAAD,OAC8BhB,EAD9B,kBAJdiB,mCAIc,kBAFb,cAEPC,EAFO,gBAKKA,EAAOC,OALZ,OAOb,IAFMC,EALO,OAMPC,EAAO,GACJC,EAAI,EAAGA,GAAK,GAAIA,GAAK,EAC5BD,EAAKE,KAAK,CACRvC,GAAIoC,EAAII,KAAKF,GAAGtC,GAChBG,UAAWiC,EAAII,KAAKF,GAAGG,KAAKC,WAC5BxC,SAAUkC,EAAII,KAAKF,GAAGG,KAAKE,KAC3B1C,YAAamC,EAAII,KAAKF,GAAGM,QAAQ,GAAG3C,YACpCG,OAAQgC,EAAII,KAAKF,GAAGM,QAAQ,GAAGC,OAG/BR,EAAKS,QACPhB,EAAeO,GAjBJ,kDAoBbU,MAAM,4BApBO,0DAAH,sDAmCd,OADAC,QAAQC,IAAIlD,GAEV,sBAAKQ,UAAU,MAAf,UACE,cAAC,EAAD,CAAcO,SAAUA,IAExB,qBAAKP,UAAU,cAAf,SACGR,EAAY+C,OAAS,GACpB/C,EAAYmD,KAAI,SAACC,EAAWC,GAC1B,OAAO,cAAC,EAAD,CAAyBrD,YAAaoD,GAApBC,YCtDtBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SAKjDZ,M","file":"static/js/main.30ee0061.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nfunction WeatherCard({ weatherData }) {\n  const { dt, description, mainTemp, feelsLike, iconID } = weatherData;\n  const date = new Date(dt * 1000);\n\n  return (\n    <div className=\"container-fluid\">\n      <div\n        className=\"card shadow rounded\"\n        style={{ width: \"14rem\", textAlign: \"center\" }}\n      >\n        <img\n          src={`http://openweathermap.org/img/wn/${iconID}@2x.png`}\n          className=\"card-img-top mx-auto\"\n          style={{ width: \"10rem\" }}\n        ></img>\n        <div className=\"card-body\">\n          <h4 className=\"card-text\">{description}</h4>\n          <p className=\"card-text\"> {date.toLocaleDateString()}</p>\n          <p className=\"card-text\">Temperature: {mainTemp} &deg;C</p>\n          <p className=\"card-text\">Feels Like: {feelsLike} &deg;C</p>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default WeatherCard;\n","import React, { useState } from \"react\";\n\nfunction CitySelector({ fetchAPI }) {\n  const [city, setCity] = useState(\"\");\n\n  function searchCity(e) {\n    e.preventDefault();\n    fetchAPI(city);\n    setCity(\"\");\n  }\n  // When user hits the 'enter' key, display the result\n  const handleKeyPress = (e) => {\n    if (e.keyCode === 13) {\n      fetchAPI(city);\n    }\n  };\n\n  const handleChange = (e) => {\n    setCity(e.target.value);\n    //   console.log(e.target.value);\n  };\n\n  return (\n    <>\n      <form>\n        <div className=\"form-group\">\n          <input\n            className=\"form-control form-input\"\n            placeholder=\"Enter your City\"\n            onChange={handleChange}\n            onKeyDown={handleKeyPress}\n            id=\"search-city\"\n            value={city}\n          />\n          <button\n            onClick={searchCity}\n            className=\"btn btn-primary\"\n            id=\"search-city\"\n            type=\"submit\"\n          >\n            Check Weather\n          </button>\n        </div>\n      </form>\n    </>\n  );\n}\n\nexport default CitySelector;\n","import WeatherCard from \"./components/WeatherCard\";\nimport CitySelector from \"./components/CitySelector\";\nimport \"./App.css\";\nimport { useState } from \"react\";\n\nfunction App() {\n  const [weatherData, setWeatherData] = useState([]);\n\n  // useEffect(() => {\n  //   async function fetchAPI() {\n  //     const result = await fetch(\n  //       `http://api.openweathermap.org/data/2.5/weather?q=Vadodara&appid=${API_KEY}&units=metric`\n  //     );\n  //     const res = await result.json();\n  //     console.log(res);\n  //     setFeelsLike(res.main.feels_like);\n  //     setMainTemp(res.main.temp);\n  //     setDescription(res.weather[0].description);\n  //     setIconID(res.weather[0].icon);\n  //   }\n  //   fetchAPI();\n  // }, []);\n  const API_KEY = process.env.REACT_APP_API_KEY;\n\n  const fetchAPI = async (city) => {\n    try {\n      const result = await fetch(\n        `https://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=${API_KEY}&units=metric`\n      );\n      const res = await result.json();\n      const data = [];\n      for (let i = 0; i <= 32; i += 8) {\n        data.push({\n          dt: res.list[i].dt,\n          feelsLike: res.list[i].main.feels_like,\n          mainTemp: res.list[i].main.temp,\n          description: res.list[i].weather[0].description,\n          iconID: res.list[i].weather[0].icon,\n        });\n      }\n      if (data.length) {\n        setWeatherData(data);\n      }\n    } catch (err) {\n      alert(\"Enter a valid city name!\");\n    }\n\n    // console.log(res);\n    // if (res) {\n    //   setWeatherData({\n    //     dt: res.list[0].dt,\n    //     feelsLike: res.list[0].main.feels_like,\n    //     mainTemp: res.list[0].main.temp,\n    //     description: res.list[0].weather[0].description,\n    //     iconID: res.list[0].weather[0].icon\n    //   });\n  };\n\n  console.log(weatherData);\n  return (\n    <div className=\"App\">\n      <CitySelector fetchAPI={fetchAPI} />\n      {/* { weatherData && <WeatherCard weatherData={weatherData}/> } */}\n      <div className=\"weatherList\">\n        {weatherData.length > 0 &&\n          weatherData.map((dataEntry, index) => {\n            return <WeatherCard key={index} weatherData={dataEntry} />;\n          })}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}